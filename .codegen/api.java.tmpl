// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.
package com.databricks.sdk.service.{{.Package.Name}};

import javax.annotation.Generated;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.apache.http.client.methods.*;

import com.databricks.sdk.client.ApiClient;
import com.databricks.sdk.client.DatabricksException;

{{if .Description}}/**
 {{.Comment " * " 80}}
 */{{end}}
@Generated("databricks-sdk-generator")
public class {{.PascalName}}API implements {{.PascalName}}Service {
    private final ApiClient apiClient;

    public {{.PascalName}}API(ApiClient apiClient) {
        this.apiClient = apiClient;
    }
	{{range .Methods}}
	{{if .Description}}/**
     {{.Comment "     * " 80}}
     */{{end}}
    @Override
    public {{if .Response -}}{{template "type" .Response}}{{else}}void{{end}} {{.CamelName}}{{if .IsNameReserved}}Content{{end}}({{if .Request}}{{template "type" .Request}} request{{end}}) {
        String path = {{if .PathParts -}}
            String.format("{{range  .PathParts}}{{.Prefix}}{{if .Field}}%s{{end}}{{ end }}"{{ range .PathParts }}{{if .Field}}, request.get{{.Field.PascalName}}(){{end}}{{ end }})
        {{- else}}"{{.Path}}"{{end}};
        {{if .Response -}}return {{end}}apiClient.{{.Verb}}(path{{if .Request}}, request{{end}}{{if .Response -}}, {{if .Response.ArrayValue }}List
            {{- else if .Response.MapValue }}Map
            {{- else}}{{template "type" .Response}}
            {{- end -}}{{else}}, Void{{end}}.class);
    }
    {{end}}
}